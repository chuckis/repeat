"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
–ë–µ–∑ –º—è–≥–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ
"""
from ortools.sat.python import cp_model
import time

def create_simple_timetable():
    print("=== –£–ü–†–û–©–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===")
    
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ
    DAYS = ["–ü–æ–Ω", "–í—Ç–æ", "–°—Ä–µ", "–ß–µ—Ç", "–ü—è—Ç"] 
    PERIODS_PER_DAY = 6
    CLASSES = ["5–ê", "5–ë"]
    SUBJECTS = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π", "–§–∏–∑–∏–∫–∞", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–ò–ó–û"]
    
    # –£—á–∏—Ç–µ–ª—è - –æ–¥–∏–Ω –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
    TEACHER_OF = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–£—á–∏—Ç–µ–ª—å1",
        "–†—É—Å—Å–∫–∏–π": "–£—á–∏—Ç–µ–ª—å2", 
        "–§–∏–∑–∏–∫–∞": "–£—á–∏—Ç–µ–ª—å3",
        "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞": "–£—á–∏—Ç–µ–ª—å4",
        "–ò–ó–û": "–£—á–∏—Ç–µ–ª—å5"
    }
    
    # –ß–∞—Å—ã –≤ –Ω–µ–¥–µ–ª—é
    REQUIRED_HOURS = {
        "5–ê": {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 7, "–†—É—Å—Å–∫–∏–π": 7, "–§–∏–∑–∏–∫–∞": 6, "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞": 5, "–ò–ó–û": 5},
        "5–ë": {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 7, "–†—É—Å—Å–∫–∏–π": 7, "–§–∏–∑–∏–∫–∞": 6, "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞": 5, "–ò–ó–û": 5}
    }
    
    TOTAL_SLOTS = len(DAYS) * PERIODS_PER_DAY
    SLOTS = list(range(TOTAL_SLOTS))
    
    print(f"–î–Ω–∏: {DAYS}")
    print(f"–£—Ä–æ–∫–æ–≤ –≤ –¥–µ–Ω—å: {PERIODS_PER_DAY}")
    print(f"–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å: {TOTAL_SLOTS}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    for cls in CLASSES:
        total = sum(REQUIRED_HOURS[cls].values())
        print(f"–ö–ª–∞—Å—Å {cls}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {total} —á–∞—Å–æ–≤")
        if total != TOTAL_SLOTS:
            print(f"–û–®–ò–ë–ö–ê: {cls} –Ω—É–∂–Ω–æ {total}, –∞ —Å–ª–æ—Ç–æ–≤ {TOTAL_SLOTS}")
            return False
    
    print("‚úì –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model = cp_model.CpModel()
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: x[–∫–ª–∞—Å—Å, –ø—Ä–µ–¥–º–µ—Ç, —Å–ª–æ—Ç]
    x = {}
    for c in CLASSES:
        for s in SUBJECTS:
            for slot in SLOTS:
                x[(c, s, slot)] = model.NewBoolVar(f"x_{c}_{s}_{slot}")
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(x)}")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1: –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ—Ç–µ –∫–ª–∞—Å—Å –∏–∑—É—á–∞–µ—Ç —Ä–æ–≤–Ω–æ 1 –ø—Ä–µ–¥–º–µ—Ç
    constraint_count = 0
    for c in CLASSES:
        for slot in SLOTS:
            model.Add(sum(x[(c, s, slot)] for s in SUBJECTS) == 1)
            constraint_count += 1
    print(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π '–æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç': {constraint_count}")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 2: –Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ —á–∞—Å–æ–≤
    for c in CLASSES:
        for s in SUBJECTS:
            model.Add(sum(x[(c, s, slot)] for slot in SLOTS) == REQUIRED_HOURS[c][s])
            constraint_count += 1
    print(f"–í—Å–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞ —á–∞—Å–æ–≤: {constraint_count}")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 3: —É—á–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    teachers = set(TEACHER_OF.values())
    for teacher in teachers:
        for slot in SLOTS:
            # –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è
            teacher_subjects = [s for s in SUBJECTS if TEACHER_OF[s] == teacher]
            # –í –∫–∞–∂–¥–æ–º —Å–ª–æ—Ç–µ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º 1 —É—Ä–æ–∫
            model.Add(sum(x[(c, s, slot)] for c in CLASSES for s in teacher_subjects) <= 1)
            constraint_count += 1
    
    print(f"–í—Å–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {constraint_count}")
    print(f"–£—á–∏—Ç–µ–ª–µ–π: {len(teachers)}")
    
    # –ë–ï–ó —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    
    # –†–µ—à–µ–Ω–∏–µ
    print("\n=== –†–ï–®–ï–ù–ò–ï ===")
    solver = cp_model.CpSolver()
    solver.parameters.max_time_in_seconds = 5.0
    solver.parameters.log_search_progress = True
    
    start_time = time.time()
    result = solver.Solve(model)
    solve_time = time.time() - start_time
    
    print(f"–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {solve_time:.2f} —Å–µ–∫")
    
    if result == cp_model.OPTIMAL:
        print("‚úì –ù–∞–π–¥–µ–Ω–æ –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ")
    elif result == cp_model.FEASIBLE:
        print("‚úì –ù–∞–π–¥–µ–Ω–æ –î–û–ü–£–°–¢–ò–ú–û–ï —Ä–µ—à–µ–Ω–∏–µ") 
    elif result == cp_model.INFEASIBLE:
        print("‚úó –ó–∞–¥–∞—á–∞ –ù–ï–†–ï–®–ê–ï–ú–ê")
        return False
    else:
        print(f"‚úó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {result}")
        return False
    
    # –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("\n=== –†–ê–°–ü–ò–°–ê–ù–ò–ï ===")
    
    def slot_to_day_period(slot):
        return slot // PERIODS_PER_DAY, slot % PERIODS_PER_DAY
    
    for c in CLASSES:
        print(f"\n--- –ö–ª–∞—Å—Å {c} ---")
        
        # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule = {}
        for slot in SLOTS:
            for s in SUBJECTS:
                if solver.Value(x[(c, s, slot)]) == 1:
                    day, period = slot_to_day_period(slot)
                    schedule[(day, period)] = s
                    break
        
        # –í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Å–∏–≤–æ
        print("     ", end="")
        for p in range(PERIODS_PER_DAY):
            print(f"–£—Ä–æ–∫{p+1:2}", end="  ")
        print()
        
        for d, day_name in enumerate(DAYS):
            print(f"{day_name:4} ", end="")
            for p in range(PERIODS_PER_DAY):
                subject = schedule.get((d, p), "---")
                print(f"{subject[:7]:7}", end="  ")
            print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
    print("\n=== –ü–†–û–í–ï–†–ö–ê ===")
    for c in CLASSES:
        print(f"\n–ö–ª–∞—Å—Å {c}:")
        for s in SUBJECTS:
            actual_hours = sum(solver.Value(x[(c, s, slot)]) for slot in SLOTS)
            required = REQUIRED_HOURS[c][s]
            status = "‚úì" if actual_hours == required else "‚úó"
            print(f"  {s}: {actual_hours}/{required} {status}")
    
    return True

if __name__ == "__main__":
    try:
        success = create_simple_timetable()
        if success:
            print("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    except ImportError:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OR-Tools. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ortools")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()